
UART_RX_Project7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  0000141c  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  0000141c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800041c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800041c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000078b  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000267  00000000  00000000  00001bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e86a  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c12  00000000  00000000  00010798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000531c7  00000000  00000000  000113aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000645b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000646f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003fc 	.word	0x080003fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003fc 	.word	0x080003fc

080001d8 <main>:
#define LED_SET          (1U<<5)

char key;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	//CLOCK ACCESS FOR GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <main+0x50>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a11      	ldr	r2, [pc, #68]	@ (8000228 <main+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30
	//SET PA5 AS OUTPUT PIN
	GPIOA->MODER |= (1U<<10);
 80001e8:	4b10      	ldr	r3, [pc, #64]	@ (800022c <main+0x54>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0f      	ldr	r2, [pc, #60]	@ (800022c <main+0x54>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80001f4:	4b0d      	ldr	r3, [pc, #52]	@ (800022c <main+0x54>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0c      	ldr	r2, [pc, #48]	@ (800022c <main+0x54>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	uart2_RX_TX_init();
 8000200:	f000 f818 	bl	8000234 <uart2_RX_TX_init>

	while(1)
	{
		if(key == '1')
 8000204:	4b0a      	ldr	r3, [pc, #40]	@ (8000230 <main+0x58>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b31      	cmp	r3, #49	@ 0x31
 800020a:	d106      	bne.n	800021a <main+0x42>
			GPIOA->ODR |= LED_SET;
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <main+0x54>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a06      	ldr	r2, [pc, #24]	@ (800022c <main+0x54>)
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	6153      	str	r3, [r2, #20]
 8000218:	e7f4      	b.n	8000204 <main+0x2c>
		else
			GPIOA->ODR &=~LED_SET;
 800021a:	4b04      	ldr	r3, [pc, #16]	@ (800022c <main+0x54>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a03      	ldr	r2, [pc, #12]	@ (800022c <main+0x54>)
 8000220:	f023 0320 	bic.w	r3, r3, #32
 8000224:	6153      	str	r3, [r2, #20]
		if(key == '1')
 8000226:	e7ed      	b.n	8000204 <main+0x2c>
 8000228:	40023800 	.word	0x40023800
 800022c:	40020000 	.word	0x40020000
 8000230:	2000001c 	.word	0x2000001c

08000234 <uart2_RX_TX_init>:
	uart2_write(ch);
	return (ch);
}

void uart2_RX_TX_init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	/****************Configure UART GPIOA pin***************/
	/*Enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 8000238:	4b32      	ldr	r3, [pc, #200]	@ (8000304 <uart2_RX_TX_init+0xd0>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023c:	4a31      	ldr	r2, [pc, #196]	@ (8000304 <uart2_RX_TX_init+0xd0>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000244:	4b30      	ldr	r3, [pc, #192]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a2f      	ldr	r2, [pc, #188]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800024a:	f023 0310 	bic.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000250:	4b2d      	ldr	r3, [pc, #180]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a2c      	ldr	r2, [pc, #176]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 800025c:	4b2a      	ldr	r3, [pc, #168]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a29      	ldr	r2, [pc, #164]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000266:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000268:	4b27      	ldr	r3, [pc, #156]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a26      	ldr	r2, [pc, #152]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800026e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000272:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000274:	4b24      	ldr	r3, [pc, #144]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a23      	ldr	r2, [pc, #140]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800027a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800027e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000280:	4b21      	ldr	r3, [pc, #132]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a20      	ldr	r2, [pc, #128]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000286:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800028a:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1d      	ldr	r2, [pc, #116]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 8000292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000296:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1a      	ldr	r2, [pc, #104]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 800029e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002a2:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RXTX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 80002a4:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	4a17      	ldr	r2, [pc, #92]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80002b0:	4b15      	ldr	r3, [pc, #84]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a14      	ldr	r2, [pc, #80]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80002bc:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002be:	6a1b      	ldr	r3, [r3, #32]
 80002c0:	4a11      	ldr	r2, [pc, #68]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 80002c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000308 <uart2_RX_TX_init+0xd4>)
 80002ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002d2:	6213      	str	r3, [r2, #32]


	/****************Configure UART module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <uart2_RX_TX_init+0xd0>)
 80002d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <uart2_RX_TX_init+0xd0>)
 80002da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002de:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure Baud Rate*/
	uart_set_baudrate(USART2, APB1_CLK, BAUDRATE);
 80002e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e4:	4909      	ldr	r1, [pc, #36]	@ (800030c <uart2_RX_TX_init+0xd8>)
 80002e6:	480a      	ldr	r0, [pc, #40]	@ (8000310 <uart2_RX_TX_init+0xdc>)
 80002e8:	f000 f814 	bl	8000314 <uart_set_baudrate>

	/*Configure transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <uart2_RX_TX_init+0xdc>)
 80002ee:	220c      	movs	r2, #12
 80002f0:	60da      	str	r2, [r3, #12]

	/*Enable UART2*/
	USART2->CR1 |= CR1_UE;
 80002f2:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <uart2_RX_TX_init+0xdc>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a06      	ldr	r2, [pc, #24]	@ (8000310 <uart2_RX_TX_init+0xdc>)
 80002f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002fc:	60d3      	str	r3, [r2, #12]
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800
 8000308:	40020000 	.word	0x40020000
 800030c:	00f42400 	.word	0x00f42400
 8000310:	40004400 	.word	0x40004400

08000314 <uart_set_baudrate>:
	/*Write to transmit data register*/
	USART2->DR = (ch & 0XFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_UART_bd(PeriphClk, BaudRate);
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	68b8      	ldr	r0, [r7, #8]
 8000324:	f000 f808 	bl	8000338 <compute_UART_bd>
 8000328:	4603      	mov	r3, r0
 800032a:	461a      	mov	r2, r3
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	609a      	str	r2, [r3, #8]
}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <compute_UART_bd>:

static uint16_t compute_UART_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	085a      	lsrs	r2, r3, #1
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	441a      	add	r2, r3
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000350:	b29b      	uxth	r3, r3
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
	...

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	@ (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	@ (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	@ (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff21 	bl	80001d8 <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	20000020 	.word	0x20000020

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	@ (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	@ (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	@ (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	@ (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
